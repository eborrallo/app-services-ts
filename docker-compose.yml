version: '3.8'

x-app-service: &default-app
  build: .
  command: ''
  depends_on:
    - mongo
    - postgres
    - rabbitmq
    - s3.docker.test
  volumes:
    - .:/code:delegated
    - node_modules:/code/node_modules:delegated

services:
  mongo:
    image: mongo:5.0.0
    environment:
      - MONGO_URL=mongodb://mongo:27017/dev
    volumes:
      - ./data/mongo:/data/db:delegated
    ports:
      - 27017:27017
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=user
      - POSTGRES_DB=auth
    ports:
      - '5432:5432'
    restart: always
  rabbitmq:
    image: 'rabbitmq:3.8-management'
    ports:
      - 5672:5672
      - 15672:15672
  s3.docker.test:
    build:
      context: ./docker/s3-storage
      dockerfile: Dockerfile
    entrypoint:
      - /start.sh
    ports:
      - 8000:8000
    environment:
      - ENDPOINT=http://s3.docker.test:8000
      - LISTEN_ADDR=0.0.0.0
      - S3BACKEND=mem
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: codely-elasticsearch
    environment:
      - node.name=codely-elasticsearch
      - discovery.type=single-node #Elasticsearch forms a single-node cluster
      - bootstrap.memory_lock=true # might cause the JVM or shell session to exit if it tries to allocate more memory than is available!
      - 'ES_JAVA_OPTS=-Xms2048m -Xmx2048m'
    ulimits:
      memlock:
        soft: -1 # The memlock soft and hard values configures the range of memory that ElasticSearch will use. Setting this to â€“1 means unlimited.
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.1
    container_name: codely-kibana
    environment:
      ELASTICSEARCH_URL: http://codely-elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://codely-elasticsearch:9200
    ports:
      - 5601:5601
  blockchain:
    image: ghcr.io/foundry-rs/foundry
    ports:
      - "8545:8545"
    entrypoint: [ "anvil" ]
  #  krakend:
  #    image: devopsfaith/krakend:watch
  #    depends_on:
  #      - auth-service
  #      - storage-service
  #    ports:
  #      - 3001:3001
  #    volumes:
  #      - "./docker/krakend/:/etc/krakend/"
  #    command: [ "run","-c","krakend.json" ]
volumes:
  node_modules:
  esdata:
    driver: local
